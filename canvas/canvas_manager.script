canvas_data = require "canvas.canvas_data"
register_shapes = require "shapes/register_shapes"
utils = require "modules/utils"
camera = require "orthographic.camera"

LEFT_CANVAS = "left_canvas#left_canvas"
RIGHT_CANVAS = "right_canvas#right_canvas"
SHAPES_FOLDER = "/shapes"
MAX_SPEED_DIFF = 400

GAME_STATE = {
	Init = 1,
	Drawing = 2,
	End = 3
}

function init(self)
	msg.post("@render:", "use_fixed_fit_projection")
	msg.post(LEFT_CANVAS, "get_canvas")
	msg.post(RIGHT_CANVAS, "get_canvas")
	self.state = GAME_STATE.Init
	start_game(self)
end

function update(self, dt)
	if self.state == GAME_STATE.Init then
		start_game(self)
	end
	if self.state == GAME_STATE.Drawing then
		local left_speed = canvas_data.left_canvas.speed
		local right_speed = canvas_data.right_canvas.speed
		if math.abs(left_speed - right_speed) > MAX_SPEED_DIFF then
			set_error_state(self)
		end
	end
end

local function choose_random_shape()
	local shapes = register_shapes:get_shapes()
	local rand_index = math.random(1, utils.len(shapes))
	print(rand_index)
	return shapes[rand_index]
end

function start_game(self)
	math.randomseed(os.clock()*100000000000)
	local shape = choose_random_shape()
	local init_data = {}
	init_data.poin_scheme = json.decode(sys.load_resource(shape.path_to_scheme))
	init_data.name = shape.name
	init_data.projection = shape.projection_id
	msg.post(RIGHT_CANVAS, "start_canvas", init_data)
	local shape = choose_random_shape()
	local init_data = {}
	init_data.poin_scheme = json.decode(sys.load_resource(shape.path_to_scheme))
	init_data.name = shape.name
	init_data.projection = shape.projection_id
	msg.post(LEFT_CANVAS, "start_canvas", init_data)
	self.state = GAME_STATE.Drawing
end

function is_init(self)
	if self.right_canvas ~= nil and self.left_canvac ~= nil then
		return true
	end
	return false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("bad_drawing") then
		set_error_state(self)
	end
end


function set_error_state(self)
	msg.post(LEFT_CANVAS, "set_error_state")
	msg.post(RIGHT_CANVAS, "set_error_state")
	-- camera.shake(hash("/camera"), 0.05,0.2,1, function() end)
	self.state = GAME_STATE.End
end