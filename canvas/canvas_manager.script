local canvas_data = require "canvas.canvas_data"
local register_shapes = require "shapes/register_shapes"
local utils = require "modules/utils"
local camera = require "orthographic.camera"
local statistics = require "statistics/statistics"


GUI = "gui"
LEFT_CANVAS = "left_canvas#left_canvas"
RIGHT_CANVAS = "right_canvas#right_canvas"
SHAPES_FOLDER = "/shapes"
MAX_SPEED_DIFF = 200

GAME_STATE = {
	Init = 1,
	Draw = 2,
	End = 3
}

function init(self)
	start_game(self)
end


-- function update(self, dt)
-- 	if self.state == GAME_STATE.Draw then
-- 		local left_speed = math.abs(canvas_data.left_canvas.speed)
-- 		local right_speed = math.abs(canvas_data.right_canvas.speed)
-- 		if math.abs(left_speed - right_speed) > MAX_SPEED_DIFF then
-- 			set_error_state(self)
-- 			msg.post(GUI, "error", {msg = "Рисуйте фигуры с одинаковой скоростью"})
-- 		end
-- 	end
-- end


local function choose_random_shape()
	local shapes = register_shapes:get_shapes()
	local rand_index = utils.rnd(1, #shapes)
	return shapes[rand_index]
end


---@param canvas string path to canvas
function start_canvas(canvas)
	local shape = choose_random_shape()
	local init_data = {}
	init_data.point_scheme = json.decode(sys.load_resource(shape.path_to_scheme))
	init_data.name = shape.name
	init_data.projection = shape.projection_id
	msg.post(canvas, "start_canvas", init_data)
end

function start_game(self)
	self.state = GAME_STATE.Init
	self.ready_count = 0
	self.complete_count = 0
	self.first_end = 0
	start_canvas(LEFT_CANVAS)
	start_canvas(RIGHT_CANVAS)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("bad_drawing") then        -- bad_drawing
		set_error_state(self)
		msg.post(GUI, "error", {msg = "Неверная фигура"})
	elseif  message_id == hash("ready") then         -- ready
		self.ready_count = self.ready_count + 1
		if self.ready_count >= 2 then -- 2
		  msg.post(LEFT_CANVAS, "draw")
		  msg.post(RIGHT_CANVAS, "draw")
		  self.state = GAME_STATE.Draw
		end
	elseif message_id == hash("not_ready") then      -- not_ready
		self.ready_count = self.ready_count - 1
	elseif message_id == hash("raised_finger") then  -- raised_finger
		set_error_state(self)
		msg.post(GUI, "error", {msg = "Не отпускайте палец c экрана"})
	elseif message_id == hash("complete") then       -- complete
		self.complete_count = self.complete_count +1
		if self.complete_count == 1 then
			self.first_end = os.time()
		end
		if self.complete_count >= 2 then --2
			if (os.time() - self.first_end) <= 1 then -- todo
				set_success_stat(self)
			else
				msg.post(GUI, "error", {msg = "Рисуйте фигуры с одинаковой скоростью"})
				set_error_state(self)
			end
		end
	elseif message_id == hash("restart_game")  then
		start_game(self)
	end
end



function set_success_stat(self)
	statistics.update_statistics(statistics.GAME_STATUS.WIN)
	msg.post(LEFT_CANVAS, "success_end")
	msg.post(RIGHT_CANVAS, "success_end")
	self.state = GAME_STATE.End
end

function set_error_state(self)
	statistics.update_statistics(statistics.GAME_STATUS.LOSE)
	msg.post(LEFT_CANVAS, "set_error_state")
	msg.post(RIGHT_CANVAS, "set_error_state")
	camera.shake(hash("/camera"), 0.05, 0.2,1, function() end)
	self.state = GAME_STATE.End
end
